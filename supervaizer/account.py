# Copyright (c) 2024-2025 Alain Prasquier - Supervaize.com. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
# If a copy of the MPL was not distributed with this file, you can obtain one at
# https://mozilla.org/MPL/2.0/.


from typing import TYPE_CHECKING, Any, ClassVar, Dict, Optional, Union

import httpx

from .__version__ import TELEMETRY_VERSION, VERSION
from .common import ApiError, ApiResult, ApiSuccess, SvBaseModel, log
from .telemetry import Telemetry

if TYPE_CHECKING:
    from .agent import Agent
    from .case import Case, CaseNodeUpdate
    from .event import Event
    from .server import Server
    from .job import Job


class AccountModel(SvBaseModel):
    # model_config = ConfigDict(arbitrary_types_allowed=True)

    supervaizer_VERSION: ClassVar[str] = VERSION
    workspace_id: str
    api_key: str
    api_url: str


class Account(AccountModel):
    def __init__(self, **kwargs: Any) -> None:
        """Account parameters are provided by Supervaize.com.
        The account ID is generated by Supervaize.com. The account API key is provided by Supervaize.com and is used
        to authenticate requests to the Supervaize Control API.
        The API URL is provided by Supervaize.com and is the URL of the Supervaize
        SaaS API.

        Raises:
            ValueError: If the account ID does not match the account name

        Tested in tests/test_account.py
        """
        super().__init__(**kwargs)

    @property
    def api_headers(self) -> Dict[str, str]:
        """Headers for the Supervaize Control API.
        Tested in tests/test_account.py
        """
        return {
            "Authorization": f"Api-Key {self.api_key}",
            "accept": "application/json",
        }

    @property
    def url_event(self) -> str:
        """URL for the Supervaize Control API.
        Tested in tests/test_account.py
        """
        return f"{self.api_url}/api/v1/ctrl-events/"

    def send_event(
        self,
        sender: Union["Agent", "Job", "Server", "Case", "CaseNodeUpdate"],
        event: "Event",
    ) -> ApiResult:
        """Send an event to the Supervaize SaaS API.

        Args:
            sender (Union[Agent, Server, Case, CaseNodeUpdate]): The sender of the event
            event (Event): The event to be sent

        Returns:
            ApiResult: ApiSuccess with response details if successful,
        Raises:
            Request exception if the request fails.
        """
        # Import here to avoid circular imports
        from .account_service import send_event as service_send_event

        return service_send_event(self, sender, event)

    def register_server(self, server: "Server") -> ApiResult:
        """Register a server with the Supervaize Control API.

        Args:
            server (Server): The server to register.

        Returns:
            ApiResult: ApiSuccess with response details if successful,
                      ApiError with error details if request fails

        Side effects:
            - Sends a ServerRegisterEvent to the Supervaize Control API
        """
        # Import here to avoid circular imports
        from .event import ServerRegisterEvent

        event = ServerRegisterEvent(server=server, account=self)
        log.debug(f"[Account register server] {event.payload.keys()}")
        return self.send_event(sender=server, event=event)

    def _create_api_result(
        self,
        success: bool,
        message: str,
        detail: Any = None,
        url: str = "",
        exception: Optional[Exception] = None,
    ) -> ApiResult:
        if success:
            return ApiSuccess(message=message, detail=detail)
        return ApiError(message=message, url=url, payload=None, exception=exception)

    def get_agent_by(
        self, agent_id: str | None = None, agent_name: str | None = None
    ) -> ApiSuccess | ApiError:
        """Get an agent from the Supervaize Control API.

        Args:
            agent_name (str): The name of the agent to get.

        Returns:
            ApiResult: ApiSuccess with response details if successful,ApiError with error details if request fails

        """
        if agent_id:
            url = f"{self.api_url}/agents/v1/id/{agent_id}"
        elif agent_name:
            url = f"{self.api_url}/agents/name/{agent_name}"
        else:
            raise ValueError("No agent ID or name provided")

        headers = self.api_headers

        try:
            response = httpx.get(url, headers=headers, follow_redirects=True)
            response.raise_for_status()
            return ApiSuccess(
                message=f"GET Agent <{agent_name or agent_id}>",
                detail=response.json(),
            )
        except httpx.HTTPError as e:
            return ApiError(
                message=f"Error GET Agent <{agent_name or agent_id}>",
                url=url,
                payload=None,
                exception=e,
            )

    def register_agent(self, agent: "Agent", polling: bool = True) -> ApiResult:
        """Send a registration event to the Supervaize Control API.
            This will be used for polling, when the agent is registered without a server.
        Args:
            agent (Agent): The agent sending the registration event
            polling (bool): If server is not defined, polling will be used.

        Returns:
            ApiResult: ApiSuccess with response details if successful,
                      ApiError with error details if request fails
        """
        # Import here to avoid circular imports
        from .event import AgentRegisterEvent

        event = AgentRegisterEvent(agent=agent, account=self, polling=polling)
        return self.send_event(agent, event)

    def send_start_case(self, case: "Case") -> ApiResult:
        # Import here to avoid circular imports
        from .event import CaseStartEvent

        event = CaseStartEvent(case=case, account=self)
        return self.send_event(case, event)

    def send_update_case(self, case: "Case", update: "CaseNodeUpdate") -> ApiResult:
        # Import here to avoid circular imports
        from .event import CaseUpdateEvent

        event = CaseUpdateEvent(case=case, update=update, account=self)
        return self.send_event(update, event)

    def send_telemetry(self, telemetry: Telemetry) -> ApiResult:
        """Send telemetry data to the Supervaize Control API.

        Args:
            telemetry (Telemetry): The telemetry object to be sent

        Returns:
            ApiResult: ApiSuccess with response details if successful,
                      ApiError with error details if request fails
        """
        url = f"{self.api_url}/{TELEMETRY_VERSION}/telemetry"
        headers = self.api_headers
        payload = {"workspace_id": self.workspace_id} | telemetry.payload
        result: ApiSuccess | ApiError
        try:
            response = httpx.post(url, headers=headers, json=payload)
            response.raise_for_status()
            result = ApiSuccess(
                message=f"Telemetry sent {telemetry.type.name}", detail=response.text
            )
        except httpx.HTTPError as e:
            result = ApiError(
                message=f"Error sending telemetry {telemetry.type.name}",
                url=url,
                payload=payload,
                exception=e,
            )

        return result
