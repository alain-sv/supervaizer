# Copyright (c) 2024-2025 Alain Prasquier - Supervaize.com. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

from typing import TYPE_CHECKING, ClassVar

import requests
import shortuuid
from pydantic import BaseModel, ConfigDict

from .__version__ import TELEMETRY_VERSION, VERSION
from .common import ApiError, ApiResult, ApiSuccess, log
from .telemetry import Telemetry

if TYPE_CHECKING:
    from .agent import Agent
    from .case import Case, CaseNodeUpdate
    from .event import Event
    from .server import Server


class AccountModel(BaseModel):
    model_config = ConfigDict(arbitrary_types_allowed=True)

    SUPERVAIZE_CONTROL_VERSION: ClassVar[str] = VERSION
    name: str
    id: str
    api_key: str
    api_url: str


class Account(AccountModel):
    def __init__(self, **kwargs):
        """Account parameters are provided by Supervaize.com.
        The account ID is generated by Supervaize.com and is a shortuuid of the account name.
        The account API key is provided by Supervaize.com and is used to authenticate requests to the Supervaize Control API.
        The API URL is provided by Supervaize.com and is the URL of the Supervaize SaaS API.

        Raises:
            ValueError: If the account ID does not match the account name

        Tested in tests/test_account.py
        """
        if kwargs.get("id") != shortuuid.uuid(name=kwargs.get("name")):
            raise ValueError("Account ID does not match")
        super().__init__(**kwargs)

    @property
    def api_headers(self):
        """Headers for the Supervaize Control API.
        Tested in tests/test_account.py
        """
        return {
            "Authorization": f"Api-Key {self.api_key}",
            "accept": "application/json",
        }

    @property
    def url_event(self):
        """URL for the Supervaize Control API.
        Tested in tests/test_account.py
        """
        return f"{self.api_url}/api/v1/ctrl-events/"

    def send_event(self, sender: "Agent | Server", event: "Event") -> ApiResult:
        """Send an event to the Supervaize SaaS API.

        Args:
            sender (Agent | Server): The sender of the event
            event (Event): The event to be sent

        Returns:
            ApiResult: ApiSuccess with response details if successful,
        Raises:
            ApiError: If the request fails
        """

        log.debug(f"Sending event {event.type.name} to {self.url_event}")
        headers = self.api_headers
        payload = event.payload
        try:
            log.debug(f"Event payload: {payload}")
            response = requests.post(self.url_event, headers=headers, json=payload)
            log.debug(f"Response: {response.text}")
            response.raise_for_status()
            result = ApiSuccess(
                message=f"Event {event.type.name} sent", detail=response.text
            )

            log.success(result.log_message)
        except requests.exceptions.RequestException as e:
            error_result = ApiError(
                message=f"Error sending event {event.type.name}",
                url=self.url_event,
                payload=event.payload,
                exception=e,
            )
            log.error(f"Error details: {error_result.dict}")
            log.error(error_result.log_message)
            raise e
        return result

    def register_server(self, server: "Server") -> ApiResult:
        """Register a server with the Supervaize Control API.

        Args:
            server (Server): The server to register.

        Returns:
            ApiResult: ApiSuccess with response details if successful,
                      ApiError with error details if request fails
        """
        from .event import ServerSendRegistrationEvent

        event = ServerSendRegistrationEvent(server=server, account=self)
        return self.send_event(server, event)

    def register_agent(self, agent: "Agent", polling: bool = True) -> ApiResult:
        """Send a registration event to the Supervaize Control API.
            This will be used for polling, when the agent is registered without a server.
        Args:
            agent (Agent): The agent sending the registration event
            polling (bool): If server is not defined, polling will be used.

        Returns:
            ApiResult: ApiSuccess with response details if successful,
                      ApiError with error details if request fails
        """
        from .event import AgentSendRegistrationEvent

        event = AgentSendRegistrationEvent(agent=agent, account=self, polling=polling)
        return self.send_event(agent, event)

    def start_case(self, case: "Case") -> ApiResult:
        from .event import CaseStartEvent

        event = CaseStartEvent(case=case, account=self)
        return self.send_event(case, event)

    def update_case(self, case: "Case", update: "CaseNodeUpdate") -> ApiResult:
        from .event import CaseUpdateEvent

        event = CaseUpdateEvent(case=case, update=update, account=self)
        return self.send_event(update, event)

    def send_telemetry(self, telemetry: Telemetry) -> ApiResult:
        """Send telemetry data to the Supervaize Control API.

        Args:
            telemetry (Telemetry): The telemetry object to be sent

        Returns:
            ApiResult: ApiSuccess with response details if successful,
                      ApiError with error details if request fails
        """
        url = f"{self.api_url}/{TELEMETRY_VERSION}/telemetry"
        headers = self.api_headers
        payload = {"tenantId": self.id} | telemetry.payload
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            result = ApiSuccess(
                message=f"Telemetry sent {telemetry.type.name}", detail=response.text
            )
        except requests.exceptions.RequestException as e:
            result = ApiError(
                message=f"Error sending telemetry {telemetry.type.name}",
                url=url,
                payload=payload,
                exception=e,
            )

        return result
